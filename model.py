# -*- coding: utf-8 -*-
"""model

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bCClKJGGSaw55AoOaeVTs8qf97EPzXgH
"""


# Commented out IPython magic to ensure Python compatibility.
import os
import torch
import torchvision
import tarfile
import torch.nn as nn
import numpy as np
import torch.nn.functional as F
from torchvision.datasets.utils import download_url
from torchvision.datasets import ImageFolder
from torch.utils.data import DataLoader
import torchvision.transforms as tt
from torch.utils.data import random_split
from torchvision.utils import make_grid
import matplotlib.pyplot as plt
# %matplotlib inline
from tqdm.notebook import tqdm
import torchvision.models as models

# Load the directory paths to the dataset

DATA_DIR = './archive/fruits-360_dataset/fruits-360'
# DATA_DIR = '../input/fruits/fruits-360'
TRAIN_DIR = DATA_DIR + '/Training'
TEST_DIR = DATA_DIR + '/Test'

train_tfms = tt.Compose([tt.RandomCrop(100, padding=10, padding_mode='reflect'), 
                         tt.RandomHorizontalFlip(),
                         tt.RandomRotation(20),
                         tt.ToTensor()
                         ])
valid_tfms = tt.Compose([tt.ToTensor()])

train_ds = ImageFolder(TRAIN_DIR, train_tfms)
valid_ds = ImageFolder(TEST_DIR, valid_tfms)

batch_size_custom =4      
batch_size_resnet = 4   
random_seed = 32
torch.manual_seed(random_seed);

# DataLoaders for Custom CNN Model
train_dl_custom = DataLoader(train_ds, batch_size_custom, shuffle=True, num_workers=3, pin_memory=True)
valid_dl_custom = DataLoader(valid_ds, batch_size_custom*2, num_workers=3, pin_memory=True)

# DataLoaders for ResNet CNN Model
train_dl_resnet = DataLoader(train_ds, batch_size_resnet, shuffle=True, num_workers=3, pin_memory=True)
valid_dl_resnet = DataLoader(valid_ds, batch_size_resnet*2, num_workers=3, pin_memory=True)

def get_default_device():
    """Pick GPU if available, else CPU"""
    if torch.cuda.is_available():
        return torch.device('cuda')
    else:
        return torch.device('cpu')
    
def to_device(data, device):
    """Move tensor(s) to chosen device"""
    if isinstance(data, (list,tuple)):
        return [to_device(x, device) for x in data]
    return data.to(device, non_blocking=True)

class DeviceDataLoader():
    """Wrap a dataloader to move data to a device"""
    def __init__(self, dl, device):
        self.dl = dl
        self.device = device
        
    def __iter__(self):
        """Yield a batch of data after moving it to device"""
        for b in self.dl: 
            yield to_device(b, self.device)

    def __len__(self):
        """Number of batches"""
        return len(self.dl)

device = get_default_device()
device

# Device Data Loader for Custom CNN Model
train_dl_custom = DeviceDataLoader(train_dl_custom, device)
valid_dl_custom = DeviceDataLoader(valid_dl_custom, device)

# Device Data Loader for Custom CNN Model
train_dl_resnet = DeviceDataLoader(train_dl_resnet, device)
valid_dl_resnet = DeviceDataLoader(valid_dl_resnet, device)

def accuracy(outputs, labels):
    _, preds = torch.max(outputs, dim=1)
    return torch.tensor(torch.sum(preds == labels).item() / len(preds))

class ImageClassificationBase(nn.Module):
    def training_step(self, batch):
        images, labels = batch 
        out = self(images)                      
        loss = F.cross_entropy(out, labels)                  
        return loss
    
    def validation_step(self, batch):
        images, labels = batch 
        out = self(images)                              
        loss = F.cross_entropy(out, labels)                 
        acc = accuracy(out, labels)                          
        return {'val_loss': loss.detach(),  'val_acc': acc}
        
    def validation_epoch_end(self, outputs):
        batch_losses = [x['val_loss'] for x in outputs]
        epoch_loss = torch.stack(batch_losses).mean()       
        batch_accs = [x['val_acc'] for x in outputs]
        epoch_acc = torch.stack(batch_accs).mean()           
        return {'val_loss': epoch_loss.item(), 'val_acc': epoch_acc.item()}
    
    def epoch_end(self, epoch, result):
        print("Epoch [{}], last_lr: {:.10f}, train_loss: {:.4f}, val_loss: {:.4f}, val_acc: {:.4f}".format(
            epoch, result['lrs'][-1], result['train_loss'], result['val_loss'], result['val_acc']))

def conv_block(in_channels, out_channels, pool=False):
    layers = [nn.Conv2d(in_channels, out_channels, kernel_size=3, padding=1), 
              nn.BatchNorm2d(out_channels),     
              nn.ReLU(inplace=True)]
    if pool: layers.append(nn.MaxPool2d(2))
    return nn.Sequential(*layers)

class CustomCNN(ImageClassificationBase):
    def __init__(self, in_channels, num_classes):
        super().__init__()
        
        self.conv1 = conv_block(in_channels, 128)                             
        self.conv2 = conv_block(128, 256, pool=True)                             
        self.res1 = nn.Sequential(conv_block(256, 256), conv_block(256, 256))    
        
        self.conv3 = conv_block(256, 512, pool=True)                            
        self.conv4 = conv_block(512, 1024, pool=True)                             
        self.res2 = nn.Sequential(conv_block(1024, 1024), conv_block(1024, 1024)) 

        self.conv5 = conv_block(1024, 2048, pool=True)                           
        self.conv6 = conv_block(2048, 4096, pool=True)                           
        self.res3 = nn.Sequential(conv_block(4096, 4096), conv_block(4096, 4096))
        
        self.classifier = nn.Sequential(nn.MaxPool2d(4),                         
                                        nn.Flatten(),                         
                                        nn.Linear(9216, num_classes))        
        
    def forward(self, xb):
        out = self.conv1(xb)
        out = self.conv2(out)
        out = self.res1(out) + out  
        out = self.conv3(out)
        out = self.conv4(out)
        out = self.res2(out) + out    
        out = self.classifier(out)
        return out

class ResNetCNN(ImageClassificationBase):
    def __init__(self):
        super().__init__()
        self.network = models.resnet34(pretrained=True)     
        num_ftrs = self.network.fc.in_features
        self.network.fc = nn.Linear(num_ftrs, 131)        
    
    def forward(self, xb):
        return torch.sigmoid(self.network(xb))
    
    def freeze(self):
        for param in self.network.parameters():
            param.require_grad = False
        for param in self.network.fc.parameters():
            param.require_grad = True
    
    def unfreeze(self):
        for param in self.network.parameters():
            param.require_grad = True

@torch.no_grad()
def evaluate(model, val_loader):
    print('Evaluating Model ...')
    model.eval()
    outputs = [model.validation_step(batch) for batch in tqdm(val_loader)]
    return model.validation_epoch_end(outputs)

def get_lr(optimizer):
    for param_group in optimizer.param_groups:
        return param_group['lr']

def fit_one_cycle(epochs, max_lr, model, train_loader, val_loader, 
                  weight_decay=0, grad_clip=None, opt_func=torch.optim.SGD):
    torch.cuda.empty_cache()
    history = []
    optimizer = opt_func(model.parameters(), max_lr, weight_decay=weight_decay)
    sched = torch.optim.lr_scheduler.OneCycleLR(optimizer, max_lr, epochs=epochs, 
                                                steps_per_epoch=len(train_loader))
    
    for epoch in range(epochs):

        model.train()
        train_losses = []
        lrs = []
        print('\nModel training begins ...')
        for batch in tqdm(train_loader):
            loss = model.training_step(batch)
            train_losses.append(loss)
            loss.backward()

            if grad_clip: 
                nn.utils.clip_grad_value_(model.parameters(), grad_clip)
            
            optimizer.step()
            optimizer.zero_grad()
            

            lrs.append(get_lr(optimizer))
            sched.step()

        result = evaluate(model, val_loader)
        result['train_loss'] = torch.stack(train_losses).mean().item()
        result['lrs'] = lrs
        model.epoch_end(epoch, result)
        history.append(result)
    return history

epochs = 1
# epochs = 10
max_lr = 1e-3
grad_clip = 1e-1
weight_decay = 1e-4
opt_func = torch.optim.Adam



input_channels = 3
output_classes = 131 

custom_model = to_device(CustomCNN(input_channels, output_classes), device)
custom_model

history_CustomCNN = [evaluate(custom_model, valid_dl_custom)]
history_CustomCNN

# Commented out IPython magic to ensure Python compatibility.
# %%time
# history_CustomCNN += fit_one_cycle(epochs, max_lr, custom_model, train_dl_custom, valid_dl_custom, 
#                                   grad_clip=grad_clip, 
#                                   weight_decay=weight_decay, 
#                                   opt_func=opt_func)

resnet_model = to_device(ResNetCNN(), device)
resnet_model

history_ResNetCNN = [evaluate(resnet_model, valid_dl_resnet)]
history_ResNetCNN

resnet_model.freeze()

# Commented out IPython magic to ensure Python compatibility.
# %%time
# history_ResNetCNN += fit_one_cycle(5, 1e-2, resnet_model, train_dl_resnet, valid_dl_resnet, 
#                                   grad_clip=grad_clip, 
#                                   weight_decay=weight_decay, 
#                                   opt_func=opt_func)

"""Now, unfreeze and train some more."""

resnet_model.unfreeze()

# Commented out IPython magic to ensure Python compatibility.
# %%time
# history_ResNetCNN += fit_one_cycle(5, 1e-3, resnet_model, train_dl_resnet, valid_dl_resnet, 
#                                   grad_clip=grad_clip, 
#                                   weight_decay=weight_decay, 
#                                   opt_func=opt_func)

"""## 7. Training Results

"""

def plot_accuracies(history, model_name):
    accuracies = [x['val_acc'] for x in history]
    plt.plot(accuracies, '-x')
    plt.xlabel('epoch')
    plt.ylabel('accuracy')
    plt.title(model_name + ' - Accuracy vs. No. of epochs');

def plot_losses(history, model_name):
    train_losses = [x.get('train_loss') for x in history]
    val_losses = [x['val_loss'] for x in history]
    plt.plot(train_losses, '-bx')
    plt.plot(val_losses, '-rx')
    plt.xlabel('epoch')
    plt.ylabel('loss')
    plt.legend(['Training', 'Validation'])
    plt.title(model_name + ' - Loss vs. No. of epochs');

def plot_lrs(history, model_name):
    lrs = np.concatenate([x.get('lrs', []) for x in history])
    plt.plot(lrs)
    plt.xlabel('Batch no.')
    plt.ylabel('Learning rate')
    plt.title(model_name + ' - Learning Rate vs. Batch no.');

"""###  Training Results for Custom CNN Model



"""

plot_accuracies(history_CustomCNN, 'Custom CNN Model')

plot_losses(history_CustomCNN, 'Custom CNN Model')

plot_lrs(history_CustomCNN, 'Custom CNN Model')

"""###  Training Results for ResNet CNN Model


"""

plot_accuracies(history_ResNetCNN, 'ResNet CNN Model')

plot_losses(history_ResNetCNN, 'ResNet CNN Model')

plot_lrs(history_ResNetCNN, 'ResNet CNN Model')

"""## Making Predictions """

def predict_image(img, model):
    # Convert to a batch of 1
    xb = to_device(img.unsqueeze(0), device)
    # Get predictions from model
    yb = model(xb)
    # Pick index with highest probability
    _, preds  = torch.max(yb, dim=1)
    # Retrieve the class label
    return valid_ds.classes[preds[0].item()]

"""### Predictions Custom CNN Model


"""

img, label = valid_ds[2569]
plt.imshow(img.permute(1, 2, 0))
print('Label:', valid_ds.classes[label], ', Predicted:', predict_image(img, custom_model))

img, label = valid_ds[9856]
plt.imshow(img.permute(1, 2, 0))
print('Label:', valid_ds.classes[label], ', Predicted:', predict_image(img, custom_model))

